#compdef dot_main

_dot() {
  local context curcontext="$curcontext" state line
  _arguments -C \
    '1: :->cmds' \
    {-h,--help}'[Show help message.]: :' \
    {-H,--help-all}'[Show manpage.]: :' \
    {-c,--config}'[Specify the configuration to load]:specify configuration file:_files' \
    '*::arg:->args' \
    && ret=0

  case $state in
    cmds)
      _values "dot commands"\
        "clone[Clone dotfile repository on your computer with git.]" \
        "pull[Pull the directory from the remote dotfiles repository.]" \
        "update[Combined command of 'pull' and 'set' commands.]" \
        "cd[Change directory to \$dotdir.]" \
        "list[Show the list which files will be managed by dot.]" \
        "check[Check the files are correctly linked to the right places.]" \
        "set[Set the symbolic links interactively.]" \
        "add[Move the file to the dotfiles directory and make its symbolic link to that place.]" \
        "edit[Edit \$dotlink file.]" \
        "unlink[Unlink the selected symbolic links and copy from its original.]" \
        "clear[Remove the all symbolic links in \$dotlink.]" \
        "config[Edit (or create if it doesn't exist) rcfile \$dotrc.]" \
        && ret=0
      ;;
    args)
      local subcmd=$line[1]
      case $subcmd in
        "clone"|"unlink")
          _path_files && ret=0
          ;;
        "pull")
          _values "options"\
            '--self[Update dot framework from repository.]'\
            && ret=0
          ;;
        "add")
          _arguments \
            '*: :_path_files' \
            && ret=0
          ;;
        "set"|"update")
          _values "options"\
            {-i,--ignore}'[No interaction mode(skip all conflicts).]' \
            {-f,--force}'[Ignore conflicts and force make symbolic links.]' \
            {-b,--backup}'[Ignore conflicts, make symbolic links and create its original backup.]' \
            {-v,--verbose}'[Print verbose messages.]' \
            && ret=0
          ;;
      esac
      ;;
  esac

  return ret
}
